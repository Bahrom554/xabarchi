<?php

namespace App\Models;

use App\Models\Comment;
use Illuminate\Database\Eloquent\Model;
use GrahamCampbell\Markdown\Facades\Markdown;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Str;

class Post extends Model
{
    protected $fillable = ['author_id', 'category_id', 'title', 'subtitle', 'body', 'slug', 'file_id', 'status', 'type', 'like', 'dislike'];

    public function tags()
    {
        return $this->belongsToMany(Tag::class, 'post_tags')->withTimestamps();
    }

    public function category()
    {
        return $this->belongsTo(Category::class);
    }
    public function file()
    {
        return $this->belongsTo(Files::class);
    }
    public function user()
    {
        return $this->belongsTo(User::class, 'author_id', 'id');
    }
    public function comments()
    {
        return $this->hasMany(Comment::class);
    }
//    for admin
    public function setSlugAttribute($value)
    {
        $this->attributes['slug'] = empty($value) ?
            Str::slug($this->attributes['title'])
            : str_replace(' ', '-', $value);
    }

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        self::created(function ($model) {
            $model->slug .= $model->id;
            $model->save();
        });
    }
    public function getStatus0Attribute(){
        return $this->status ? "active" : "draft";
    }

//    for-front-end

    public function scopeLatestFirst($query)
    {
        return $query->orderBy('updated_at', 'desc');
    }
    public function scopeCommon($query){
        return $query->where('status','1')->whereNotNull('file_id')->with('user', 'category', 'tags', 'comments', 'file')->orderBy('updated_at', 'desc');
    }

    public function scopeSearch($query, $term)
    {
        //check if any term entered
        if ($term) {
            $query->where(function ($q) use ($term) {

                $q->orwhereHas('category', function ($qr) use ($term) {
                    $qr->where('title', 'LIKE', "%{$term}%");
                });
                $q->orwhere('title', 'LIKE', "%{$term}%");
                $q->orwhere('subtitle', 'LIKE', "%{$term}%");
            });
        }
    }
    public function scopePopular($query)
    {
        return $query->orderBy('view_count', 'desc');
    }

    // count the post comments
    public function commentNumber()
    {
        $commentNumber = $this->comments->count();
        return $commentNumber;
    }

    public function sameInTags()
    {
        $tags = DB::table('post_tags')->select('count(post_id) as number_of_posts,tag_id')->groupBy('tag_id')->orderBy('number_of_posts', 'DESC')->get();
    }

    //    public function getBodyAttribute()
    //    {
    ////        return html_entity_decode();
    ////       return  Markdown::convertToHtml($this->body);
    //    }


}
